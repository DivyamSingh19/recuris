generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Patient {
  id       Int    @id @default(autoincrement()) @unique 
  email    String @unique
  name     String
  password String
  walletAddress String @unique 


  doctors       Doctor[]
  appointments  Appointments[]
  pin          Pin?
  profile PatientProfile?
  otp       OTPPatient[]
  diagnosticCenter DiagnosticCenter[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Hospital_Admin {
  id       Int    @id @default(autoincrement()) @unique
  name     String
  email    String @unique
  hospital String
  password String
  h_id     String


  profile HospitalAdminProfile?
}

model Doctor {
  id       Int    @id @default(autoincrement()) @unique
  name String
  email    String  @unique
  hospital String
  h_id     String
  password String
  walletAddress String @unique  

  pin     Pin?
  profile  DoctorProfile?
  appointments Appointments[]
  patients     Patient[]
  otp         OTPDoctor[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Hospital {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  h_id     String
}
model DiagnosticCenter {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  location String
  phoneNumber String @unique
  password String
  specialization String
  walletAddress  String @unique  
  profile DiagnosticCenterProfile?
  pin Pin?

  otp     OTPDiagnosticCenter[]
  patients  Patient[]
  appointment  Appointments[]
}
model Appointments {
  id Int @id @default(autoincrement())
  patientId Int @unique
  patient Patient  @relation(fields: [patientId],references: [id])
  doctorId Int?
  doctor Doctor? @relation(fields: [doctorId],references: [id])
  diagnosticCenterId  Int?
  diagnosticCenter DiagnosticCenter? @relation(fields: [diagnosticCenterId],references: [id])
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pin {
  id Int @id @default(autoincrement())
  patientId Int @unique
  patient Patient @relation(fields: [patientId],references: [id])
  doctorId Int @unique
  doctor Doctor @relation(fields: [doctorId],references: [id])
  diagnosticCenterId Int @unique
  diagnosticCenter DiagnosticCenter @relation(fields: [diagnosticCenterId],references: [id])
  
}
model PatientProfile {
  id     Int    @id   @default(autoincrement())
  profileImage  String
  patientId Int @unique
  patient    Patient @relation(fields: [patientId] ,references: [id])
  location String
  age    String
  phoneNumber String
  gender      String
   
   
}
model DoctorProfile {
  id Int @id @default(autoincrement())
  profileImage String
  experience Int
  doctorId Int @unique
  doctor Doctor @relation(fields: [doctorId],references: [id])
  age    String
  phoneNumber String
  gender      String
   
}
model DiagnosticCenterProfile {
  id Int @id @default(autoincrement())
  profileImage String
  experience Int
  diagnosticCenterId Int @unique
  diagnosticCenter DiagnosticCenter @relation(fields: [diagnosticCenterId],references: [id])
}

model HospitalAdminProfile{
  id Int @id @default(autoincrement())
  profileImage String
  experience Int
  hospitalAdminId Int @unique
  hospitalAdmin Hospital_Admin @relation(fields: [hospitalAdminId],references: [id])

}
model OTPPatient{
  id String @id @default(uuid())
  patientId Int @unique
  
  otp    String
  expiresAt  DateTime
  patient    Patient  @relation(fields: [patientId] ,references: [id],onDelete: Cascade)
}
model OTPDoctor{
   id String @id @default(uuid())
  doctorId Int @unique
  
  otp    String
  expiresAt  DateTime
  doctor    Doctor  @relation(fields: [doctorId] ,references: [id],onDelete: Cascade)
}
model OTPDiagnosticCenter{
  id String @id @default(uuid())
  diagnosticCenterId Int @unique
  otp String
  expiresAt DateTime
  diagnosticCenter  DiagnosticCenter @relation(fields: [diagnosticCenterId],references: [id],onDelete: Cascade)
}
model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String
  senderId Int 
  receiverId Int

  senderType String
  receiverType String

  senderDoctor Doctor? @relation("SentMessages", fields: [senderId],references: [id],map: "sender_doctor")
  senderPatient Patient? @relation("SentMessages",fields: [senderId],references: [id],map: "sender_patient")
  receiverDoctor Doctor? @relation("ReceivedMessages",fields: [receiverId],references: [id],map: "receiver_doctor")
  receiverPatient Patient? @relation("ReceivedMessages",fields: [receiverId],references: [id],map: "receiver_patient")

  @@index([senderId,senderType])
  @@index([receiverId,receiverType])
}