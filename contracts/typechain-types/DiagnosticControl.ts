/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DiagnosticControl {
  export type DiagnosticReportStruct = {
    reportHash: string;
    reportMetadata: string;
    timestamp: BigNumberish;
    diagnosticCenter: AddressLike;
    isActive: boolean;
  };

  export type DiagnosticReportStructOutput = [
    reportHash: string,
    reportMetadata: string,
    timestamp: bigint,
    diagnosticCenter: string,
    isActive: boolean
  ] & {
    reportHash: string;
    reportMetadata: string;
    timestamp: bigint;
    diagnosticCenter: string;
    isActive: boolean;
  };
}

export interface DiagnosticControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDiagnosticReport"
      | "authorizeCenterForPatient"
      | "authorizeDiagnosticCenter"
      | "deauthorizeCenterForPatient"
      | "deauthorizeDiagnosticCenter"
      | "isCenterAuthorized"
      | "isCenterAuthorizedForPatient"
      | "owner"
      | "renounceOwnership"
      | "viewMyReports"
      | "viewPatientReports"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CenterAuthorized"
      | "CenterDeauthorized"
      | "CenterPatientAuthorizationChanged"
      | "ReportAdded"
      | "ReportViewed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDiagnosticReport",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeCenterForPatient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeDiagnosticCenter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeCenterForPatient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeDiagnosticCenter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCenterAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCenterAuthorizedForPatient",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewMyReports",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientReports",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDiagnosticReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeCenterForPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDiagnosticCenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeCenterForPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeDiagnosticCenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCenterAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCenterAuthorizedForPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMyReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientReports",
    data: BytesLike
  ): Result;
}

export namespace CenterAuthorizedEvent {
  export type InputTuple = [center: AddressLike];
  export type OutputTuple = [center: string];
  export interface OutputObject {
    center: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CenterDeauthorizedEvent {
  export type InputTuple = [center: AddressLike];
  export type OutputTuple = [center: string];
  export interface OutputObject {
    center: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CenterPatientAuthorizationChangedEvent {
  export type InputTuple = [
    center: AddressLike,
    patient: AddressLike,
    authorized: boolean
  ];
  export type OutputTuple = [
    center: string,
    patient: string,
    authorized: boolean
  ];
  export interface OutputObject {
    center: string;
    patient: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportAddedEvent {
  export type InputTuple = [
    center: AddressLike,
    patient: AddressLike,
    reportHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    center: string,
    patient: string,
    reportHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    center: string;
    patient: string;
    reportHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportViewedEvent {
  export type InputTuple = [
    center: AddressLike,
    patient: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    center: string,
    patient: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    center: string;
    patient: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiagnosticControl extends BaseContract {
  connect(runner?: ContractRunner | null): DiagnosticControl;
  waitForDeployment(): Promise<this>;

  interface: DiagnosticControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDiagnosticReport: TypedContractMethod<
    [patient: AddressLike, reportHash: string, reportMetadata: string],
    [void],
    "nonpayable"
  >;

  authorizeCenterForPatient: TypedContractMethod<
    [center: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizeDiagnosticCenter: TypedContractMethod<
    [center: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeCenterForPatient: TypedContractMethod<
    [center: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeDiagnosticCenter: TypedContractMethod<
    [center: AddressLike],
    [void],
    "nonpayable"
  >;

  isCenterAuthorized: TypedContractMethod<
    [center: AddressLike],
    [boolean],
    "view"
  >;

  isCenterAuthorizedForPatient: TypedContractMethod<
    [center: AddressLike, patient: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  viewMyReports: TypedContractMethod<
    [],
    [DiagnosticControl.DiagnosticReportStructOutput[]],
    "view"
  >;

  viewPatientReports: TypedContractMethod<
    [patient: AddressLike],
    [DiagnosticControl.DiagnosticReportStructOutput[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDiagnosticReport"
  ): TypedContractMethod<
    [patient: AddressLike, reportHash: string, reportMetadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeCenterForPatient"
  ): TypedContractMethod<[center: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeDiagnosticCenter"
  ): TypedContractMethod<[center: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeCenterForPatient"
  ): TypedContractMethod<[center: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeDiagnosticCenter"
  ): TypedContractMethod<[center: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCenterAuthorized"
  ): TypedContractMethod<[center: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCenterAuthorizedForPatient"
  ): TypedContractMethod<
    [center: AddressLike, patient: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewMyReports"
  ): TypedContractMethod<
    [],
    [DiagnosticControl.DiagnosticReportStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewPatientReports"
  ): TypedContractMethod<
    [patient: AddressLike],
    [DiagnosticControl.DiagnosticReportStructOutput[]],
    "nonpayable"
  >;

  getEvent(
    key: "CenterAuthorized"
  ): TypedContractEvent<
    CenterAuthorizedEvent.InputTuple,
    CenterAuthorizedEvent.OutputTuple,
    CenterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "CenterDeauthorized"
  ): TypedContractEvent<
    CenterDeauthorizedEvent.InputTuple,
    CenterDeauthorizedEvent.OutputTuple,
    CenterDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "CenterPatientAuthorizationChanged"
  ): TypedContractEvent<
    CenterPatientAuthorizationChangedEvent.InputTuple,
    CenterPatientAuthorizationChangedEvent.OutputTuple,
    CenterPatientAuthorizationChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReportAdded"
  ): TypedContractEvent<
    ReportAddedEvent.InputTuple,
    ReportAddedEvent.OutputTuple,
    ReportAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReportViewed"
  ): TypedContractEvent<
    ReportViewedEvent.InputTuple,
    ReportViewedEvent.OutputTuple,
    ReportViewedEvent.OutputObject
  >;

  filters: {
    "CenterAuthorized(address)": TypedContractEvent<
      CenterAuthorizedEvent.InputTuple,
      CenterAuthorizedEvent.OutputTuple,
      CenterAuthorizedEvent.OutputObject
    >;
    CenterAuthorized: TypedContractEvent<
      CenterAuthorizedEvent.InputTuple,
      CenterAuthorizedEvent.OutputTuple,
      CenterAuthorizedEvent.OutputObject
    >;

    "CenterDeauthorized(address)": TypedContractEvent<
      CenterDeauthorizedEvent.InputTuple,
      CenterDeauthorizedEvent.OutputTuple,
      CenterDeauthorizedEvent.OutputObject
    >;
    CenterDeauthorized: TypedContractEvent<
      CenterDeauthorizedEvent.InputTuple,
      CenterDeauthorizedEvent.OutputTuple,
      CenterDeauthorizedEvent.OutputObject
    >;

    "CenterPatientAuthorizationChanged(address,address,bool)": TypedContractEvent<
      CenterPatientAuthorizationChangedEvent.InputTuple,
      CenterPatientAuthorizationChangedEvent.OutputTuple,
      CenterPatientAuthorizationChangedEvent.OutputObject
    >;
    CenterPatientAuthorizationChanged: TypedContractEvent<
      CenterPatientAuthorizationChangedEvent.InputTuple,
      CenterPatientAuthorizationChangedEvent.OutputTuple,
      CenterPatientAuthorizationChangedEvent.OutputObject
    >;

    "ReportAdded(address,address,string,uint256)": TypedContractEvent<
      ReportAddedEvent.InputTuple,
      ReportAddedEvent.OutputTuple,
      ReportAddedEvent.OutputObject
    >;
    ReportAdded: TypedContractEvent<
      ReportAddedEvent.InputTuple,
      ReportAddedEvent.OutputTuple,
      ReportAddedEvent.OutputObject
    >;

    "ReportViewed(address,address,uint256)": TypedContractEvent<
      ReportViewedEvent.InputTuple,
      ReportViewedEvent.OutputTuple,
      ReportViewedEvent.OutputObject
    >;
    ReportViewed: TypedContractEvent<
      ReportViewedEvent.InputTuple,
      ReportViewedEvent.OutputTuple,
      ReportViewedEvent.OutputObject
    >;
  };
}
