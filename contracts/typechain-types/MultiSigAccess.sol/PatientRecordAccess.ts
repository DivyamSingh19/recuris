/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PatientRecordAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addApprover"
      | "approverCount"
      | "approvers"
      | "authorizedEntities"
      | "grantAccess"
      | "hasAccess"
      | "patient"
      | "removeApprover"
      | "requiredApprovals"
      | "revokeAccess"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "ApproverAdded"
      | "ApproverRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addApprover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approverCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedEntities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "patient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeApprover",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approverCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "patient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeApprover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [entity: AddressLike];
  export type OutputTuple = [entity: string];
  export interface OutputObject {
    entity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [entity: AddressLike];
  export type OutputTuple = [entity: string];
  export interface OutputObject {
    entity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproverAddedEvent {
  export type InputTuple = [approver: AddressLike];
  export type OutputTuple = [approver: string];
  export interface OutputObject {
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApproverRemovedEvent {
  export type InputTuple = [approver: AddressLike];
  export type OutputTuple = [approver: string];
  export interface OutputObject {
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PatientRecordAccess extends BaseContract {
  connect(runner?: ContractRunner | null): PatientRecordAccess;
  waitForDeployment(): Promise<this>;

  interface: PatientRecordAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addApprover: TypedContractMethod<
    [_approver: AddressLike],
    [void],
    "nonpayable"
  >;

  approverCount: TypedContractMethod<[], [bigint], "view">;

  approvers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  authorizedEntities: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [_entity: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAccess: TypedContractMethod<[_entity: AddressLike], [boolean], "view">;

  patient: TypedContractMethod<[], [string], "view">;

  removeApprover: TypedContractMethod<
    [_approver: AddressLike],
    [void],
    "nonpayable"
  >;

  requiredApprovals: TypedContractMethod<[], [bigint], "view">;

  revokeAccess: TypedContractMethod<
    [_entity: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addApprover"
  ): TypedContractMethod<[_approver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approverCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approvers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "authorizedEntities"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<[_entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<[_entity: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "patient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeApprover"
  ): TypedContractMethod<[_approver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredApprovals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<[_entity: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ApproverAdded"
  ): TypedContractEvent<
    ApproverAddedEvent.InputTuple,
    ApproverAddedEvent.OutputTuple,
    ApproverAddedEvent.OutputObject
  >;
  getEvent(
    key: "ApproverRemoved"
  ): TypedContractEvent<
    ApproverRemovedEvent.InputTuple,
    ApproverRemovedEvent.OutputTuple,
    ApproverRemovedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "ApproverAdded(address)": TypedContractEvent<
      ApproverAddedEvent.InputTuple,
      ApproverAddedEvent.OutputTuple,
      ApproverAddedEvent.OutputObject
    >;
    ApproverAdded: TypedContractEvent<
      ApproverAddedEvent.InputTuple,
      ApproverAddedEvent.OutputTuple,
      ApproverAddedEvent.OutputObject
    >;

    "ApproverRemoved(address)": TypedContractEvent<
      ApproverRemovedEvent.InputTuple,
      ApproverRemovedEvent.OutputTuple,
      ApproverRemovedEvent.OutputObject
    >;
    ApproverRemoved: TypedContractEvent<
      ApproverRemovedEvent.InputTuple,
      ApproverRemovedEvent.OutputTuple,
      ApproverRemovedEvent.OutputObject
    >;
  };
}
