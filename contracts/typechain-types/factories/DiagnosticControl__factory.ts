/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  DiagnosticControl,
  DiagnosticControlInterface,
} from "../DiagnosticControl";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "center",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "patient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reportHash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ReportAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "center",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "patient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "ReportViewed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "patient",
        type: "address",
      },
      {
        internalType: "string",
        name: "reportHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "reportMetadata",
        type: "string",
      },
    ],
    name: "addDiagnosticReport",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
    ],
    name: "authorizeCenterForPatient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
    ],
    name: "authorizeDiagnosticCenter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
    ],
    name: "deauthorizeCenterForPatient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
    ],
    name: "deauthorizeDiagnosticCenter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
    ],
    name: "isCenterAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "center",
        type: "address",
      },
      {
        internalType: "address",
        name: "patient",
        type: "address",
      },
    ],
    name: "isCenterAuthorizedForPatient",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "viewMyReports",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "reportHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "reportMetadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "diagnosticCenter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct DiagnosticControl.DiagnosticReport[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "patient",
        type: "address",
      },
    ],
    name: "viewPatientReports",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "reportHash",
            type: "string",
          },
          {
            internalType: "string",
            name: "reportMetadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "diagnosticCenter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct DiagnosticControl.DiagnosticReport[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a7b806100606000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80633740790b116100665780633740790b146101305780639024a9e11461014c578063a0bac43f1461016a578063c8fac31f14610186578063f8eabc97146101a257610093565b806311295b8314610098578063132d1f6b146100c8578063137ca105146100f85780631db2911314610114575b600080fd5b6100b260048036038101906100ad9190611082565b6101d2565b6040516100bf91906110ca565b60405180910390f35b6100e260048036038101906100dd9190611082565b610228565b6040516100ef91906112eb565b60405180910390f35b610112600480360381019061010d9190611082565b610620565b005b61012e60048036038101906101299190611082565b6106b8565b005b61014a60048036038101906101459190611372565b6107a3565b005b610154610b3e565b60405161016191906112eb565b60405180910390f35b610184600480360381019061017f9190611082565b610d78565b005b6101a0600480360381019061019b9190611082565b610e62565b005b6101bc60048036038101906101b79190611407565b610f86565b6040516101c991906110ca565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ad906114ca565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610380576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103779061155c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7f83eb68520a5a6aa4371a4b285dc8a2693a4d010d5d58039ff3d403b213884e426040516103dd919061158b565b60405180910390a36000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561061457838290600052602060002090600402016040518060a0016040529081600082018054610476906115d5565b80601f01602080910402602001604051908101604052809291908181526020018280546104a2906115d5565b80156104ef5780601f106104c4576101008083540402835291602001916104ef565b820191906000526020600020905b8154815290600101906020018083116104d257829003601f168201915b50505050508152602001600182018054610508906115d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610534906115d5565b80156105815780601f1061055657610100808354040283529160200191610581565b820191906000526020600020905b81548152906001019060200180831161056457829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16151515158152505081526020019060010190610443565b50505050915050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073f90611678565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661082f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906114ca565b60405180910390fd5b84600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f09061155c565b60405180910390fd5b60006040518060a0016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581525090506000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019081610a429190611873565b506020820151816001019081610a589190611873565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff02191690831515021790555050508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd4ace5ccb8ed68e534af3bf565b2023205c071d18b062f0259a0f7f644c1ab04888842604051610b2d93929190611981565b60405180910390a350505050505050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610d6f57838290600052602060002090600402016040518060a0016040529081600082018054610bd1906115d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfd906115d5565b8015610c4a5780601f10610c1f57610100808354040283529160200191610c4a565b820191906000526020600020905b815481529060010190602001808311610c2d57829003601f168201915b50505050508152602001600182018054610c63906115d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f906115d5565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16151515158152505081526020019060010190610b9e565b50505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dff90611678565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee590611a25565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061104f82611024565b9050919050565b61105f81611044565b811461106a57600080fd5b50565b60008135905061107c81611056565b92915050565b6000602082840312156110985761109761101a565b5b60006110a68482850161106d565b91505092915050565b60008115159050919050565b6110c4816110af565b82525050565b60006020820190506110df60008301846110bb565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114b578082015181840152602081019050611130565b60008484015250505050565b6000601f19601f8301169050919050565b600061117382611111565b61117d818561111c565b935061118d81856020860161112d565b61119681611157565b840191505092915050565b6000819050919050565b6111b4816111a1565b82525050565b6111c381611044565b82525050565b6111d2816110af565b82525050565b600060a08301600083015184820360008601526111f58282611168565b9150506020830151848203602086015261120f8282611168565b915050604083015161122460408601826111ab565b50606083015161123760608601826111ba565b50608083015161124a60808601826111c9565b508091505092915050565b600061126183836111d8565b905092915050565b6000602082019050919050565b6000611281826110e5565b61128b81856110f0565b93508360208202850161129d85611101565b8060005b858110156112d957848403895281516112ba8582611255565b94506112c583611269565b925060208a019950506001810190506112a1565b50829750879550505050505092915050565b600060208201905081810360008301526113058184611276565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126113325761133161130d565b5b8235905067ffffffffffffffff81111561134f5761134e611312565b5b60208301915083600182028301111561136b5761136a611317565b5b9250929050565b60008060008060006060868803121561138e5761138d61101a565b5b600061139c8882890161106d565b955050602086013567ffffffffffffffff8111156113bd576113bc61101f565b5b6113c98882890161131c565b9450945050604086013567ffffffffffffffff8111156113ec576113eb61101f565b5b6113f88882890161131c565b92509250509295509295909350565b6000806040838503121561141e5761141d61101a565b5b600061142c8582860161106d565b925050602061143d8582860161106d565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920617574686f72697a656420646961676e6f737469632063656e746560008201527f72732063616e20706572666f726d207468697320616374696f6e000000000000602082015250565b60006114b4603a83611447565b91506114bf82611458565b604082019050919050565b600060208201905081810360008301526114e3816114a7565b9050919050565b7f43656e746572206e6f7420617574686f72697a656420666f722074686973207060008201527f617469656e740000000000000000000000000000000000000000000000000000602082015250565b6000611546602683611447565b9150611551826114ea565b604082019050919050565b6000602082019050818103600083015261157581611539565b9050919050565b611585816111a1565b82525050565b60006020820190506115a0600083018461157c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115ed57607f821691505b602082108103611600576115ff6115a6565b5b50919050565b7f4f6e6c79206f776e65722063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611662602283611447565b915061166d82611606565b604082019050919050565b6000602082019050818103600083015261169181611655565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026117297fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826116ec565b61173386836116ec565b95508019841693508086168417925050509392505050565b6000819050919050565b600061177061176b611766846111a1565b61174b565b6111a1565b9050919050565b6000819050919050565b61178a83611755565b61179e61179682611777565b8484546116f9565b825550505050565b600090565b6117b36117a6565b6117be818484611781565b505050565b5b818110156117e2576117d76000826117ab565b6001810190506117c4565b5050565b601f821115611827576117f8816116c7565b611801846116dc565b81016020851015611810578190505b61182461181c856116dc565b8301826117c3565b50505b505050565b600082821c905092915050565b600061184a6000198460080261182c565b1980831691505092915050565b60006118638383611839565b9150826002028217905092915050565b61187c82611111565b67ffffffffffffffff81111561189557611894611698565b5b61189f82546115d5565b6118aa8282856117e6565b600060209050601f8311600181146118dd57600084156118cb578287015190505b6118d58582611857565b86555061193d565b601f1984166118eb866116c7565b60005b82811015611913578489015182556001820191506020850194506020810190506118ee565b86831015611930578489015161192c601f891682611839565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006119608385611447565b935061196d838584611945565b61197683611157565b840190509392505050565b6000604082019050818103600083015261199c818587611954565b90506119ab602083018461157c565b949350505050565b7f41646472657373206973206e6f7420616e20617574686f72697a65642064696160008201527f676e6f737469632063656e746572000000000000000000000000000000000000602082015250565b6000611a0f602e83611447565b9150611a1a826119b3565b604082019050919050565b60006020820190508181036000830152611a3e81611a02565b905091905056fea26469706673582212205e8c439a1cfde3291dd662a485de6b6de118149ea235fa1be3b6a0d0182d15f664736f6c634300081c0033";

type DiagnosticControlConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiagnosticControlConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiagnosticControl__factory extends ContractFactory {
  constructor(...args: DiagnosticControlConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DiagnosticControl & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiagnosticControl__factory {
    return super.connect(runner) as DiagnosticControl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiagnosticControlInterface {
    return new Interface(_abi) as DiagnosticControlInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DiagnosticControl {
    return new Contract(address, _abi, runner) as unknown as DiagnosticControl;
  }
}
