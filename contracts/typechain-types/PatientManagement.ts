/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PatientManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMedicalReport"
      | "getAccessList"
      | "grantAccess"
      | "grantEmergencyAccess"
      | "multiSigUnlock"
      | "owner"
      | "patients"
      | "records"
      | "revokeAccess"
      | "uploadRecord"
      | "viewPatientRecords"
      | "viewRecords"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "EmergencyAccessGranted"
      | "RecordUploaded"
      | "ReportAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMedicalReport",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEmergencyAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigUnlock",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patients",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadRecord",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewRecords",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addMedicalReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEmergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "patients", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewRecords",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [patient: AddressLike, entity: AddressLike];
  export type OutputTuple = [patient: string, entity: string];
  export interface OutputObject {
    patient: string;
    entity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [patient: AddressLike, entity: AddressLike];
  export type OutputTuple = [patient: string, entity: string];
  export interface OutputObject {
    patient: string;
    entity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAccessGrantedEvent {
  export type InputTuple = [patient: AddressLike, entity: AddressLike];
  export type OutputTuple = [patient: string, entity: string];
  export interface OutputObject {
    patient: string;
    entity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordUploadedEvent {
  export type InputTuple = [
    patient: AddressLike,
    recordId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    patient: string,
    recordId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    patient: string;
    recordId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportAddedEvent {
  export type InputTuple = [
    patient: AddressLike,
    doctor: AddressLike,
    recordId: BigNumberish
  ];
  export type OutputTuple = [patient: string, doctor: string, recordId: bigint];
  export interface OutputObject {
    patient: string;
    doctor: string;
    recordId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PatientManagement extends BaseContract {
  connect(runner?: ContractRunner | null): PatientManagement;
  waitForDeployment(): Promise<this>;

  interface: PatientManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMedicalReport: TypedContractMethod<
    [patient: AddressLike, reportHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getAccessList: TypedContractMethod<
    [patient: AddressLike],
    [string[]],
    "view"
  >;

  grantAccess: TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;

  grantEmergencyAccess: TypedContractMethod<
    [entity: AddressLike],
    [void],
    "nonpayable"
  >;

  multiSigUnlock: TypedContractMethod<
    [patient: AddressLike, approvers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  patients: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { exists: boolean; recordCount: bigint }],
    "view"
  >;

  records: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string] & {
        recordHash: string;
        timestamp: bigint;
        uploader: string;
      }
    ],
    "view"
  >;

  revokeAccess: TypedContractMethod<
    [entity: AddressLike],
    [void],
    "nonpayable"
  >;

  uploadRecord: TypedContractMethod<
    [recordHash: BytesLike],
    [void],
    "nonpayable"
  >;

  viewPatientRecords: TypedContractMethod<
    [patient: AddressLike],
    [string[]],
    "view"
  >;

  viewRecords: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMedicalReport"
  ): TypedContractMethod<
    [patient: AddressLike, reportHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAccessList"
  ): TypedContractMethod<[patient: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantEmergencyAccess"
  ): TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "multiSigUnlock"
  ): TypedContractMethod<
    [patient: AddressLike, approvers: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "patients"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { exists: boolean; recordCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string] & {
        recordHash: string;
        timestamp: bigint;
        uploader: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<[entity: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uploadRecord"
  ): TypedContractMethod<[recordHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewPatientRecords"
  ): TypedContractMethod<[patient: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "viewRecords"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAccessGranted"
  ): TypedContractEvent<
    EmergencyAccessGrantedEvent.InputTuple,
    EmergencyAccessGrantedEvent.OutputTuple,
    EmergencyAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RecordUploaded"
  ): TypedContractEvent<
    RecordUploadedEvent.InputTuple,
    RecordUploadedEvent.OutputTuple,
    RecordUploadedEvent.OutputObject
  >;
  getEvent(
    key: "ReportAdded"
  ): TypedContractEvent<
    ReportAddedEvent.InputTuple,
    ReportAddedEvent.OutputTuple,
    ReportAddedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address,address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "EmergencyAccessGranted(address,address)": TypedContractEvent<
      EmergencyAccessGrantedEvent.InputTuple,
      EmergencyAccessGrantedEvent.OutputTuple,
      EmergencyAccessGrantedEvent.OutputObject
    >;
    EmergencyAccessGranted: TypedContractEvent<
      EmergencyAccessGrantedEvent.InputTuple,
      EmergencyAccessGrantedEvent.OutputTuple,
      EmergencyAccessGrantedEvent.OutputObject
    >;

    "RecordUploaded(address,uint256,uint256)": TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;
    RecordUploaded: TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;

    "ReportAdded(address,address,uint256)": TypedContractEvent<
      ReportAddedEvent.InputTuple,
      ReportAddedEvent.OutputTuple,
      ReportAddedEvent.OutputObject
    >;
    ReportAdded: TypedContractEvent<
      ReportAddedEvent.InputTuple,
      ReportAddedEvent.OutputTuple,
      ReportAddedEvent.OutputObject
    >;
  };
}
