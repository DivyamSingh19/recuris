/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MedAccessControl {
  export type AccessEventStruct = {
    provider: AddressLike;
    timestamp: BigNumberish;
    actionType: string;
    details: string;
  };

  export type AccessEventStructOutput = [
    provider: string,
    timestamp: bigint,
    actionType: string,
    details: string
  ] & {
    provider: string;
    timestamp: bigint;
    actionType: string;
    details: string;
  };

  export type AccessPermissionStruct = {
    provider: AddressLike;
    providerName: string;
    providerRole: string;
    accessType: BigNumberish;
    grantedAt: BigNumberish;
    expiresAt: BigNumberish;
    isActive: boolean;
  };

  export type AccessPermissionStructOutput = [
    provider: string,
    providerName: string,
    providerRole: string,
    accessType: bigint,
    grantedAt: bigint,
    expiresAt: bigint,
    isActive: boolean
  ] & {
    provider: string;
    providerName: string;
    providerRole: string;
    accessType: bigint;
    grantedAt: bigint;
    expiresAt: bigint;
    isActive: boolean;
  };
}

export interface MedAccessControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAccess"
      | "emergencyAccess"
      | "getMyAccessHistory"
      | "getMyActivePermissions"
      | "grantAccess"
      | "revokeAccess"
      | "revokeAllAccess"
      | "updateAccessExpiration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "AccessUsed"
      | "EmergencyAccessUsed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyAccessHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyActivePermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccessExpiration",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyAccessHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyActivePermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccessExpiration",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    patient: AddressLike,
    provider: AddressLike,
    accessType: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    patient: string,
    provider: string,
    accessType: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    patient: string;
    provider: string;
    accessType: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    patient: AddressLike,
    provider: AddressLike,
    reason: string
  ];
  export type OutputTuple = [patient: string, provider: string, reason: string];
  export interface OutputObject {
    patient: string;
    provider: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessUsedEvent {
  export type InputTuple = [
    patient: AddressLike,
    provider: AddressLike,
    actionType: string
  ];
  export type OutputTuple = [
    patient: string,
    provider: string,
    actionType: string
  ];
  export interface OutputObject {
    patient: string;
    provider: string;
    actionType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAccessUsedEvent {
  export type InputTuple = [
    patient: AddressLike,
    provider: AddressLike,
    reason: string
  ];
  export type OutputTuple = [patient: string, provider: string, reason: string];
  export interface OutputObject {
    patient: string;
    provider: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MedAccessControl extends BaseContract {
  connect(runner?: ContractRunner | null): MedAccessControl;
  waitForDeployment(): Promise<this>;

  interface: MedAccessControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAccess: TypedContractMethod<
    [patient: AddressLike, provider: AddressLike, accessType: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  emergencyAccess: TypedContractMethod<
    [patient: AddressLike, reason: string],
    [boolean],
    "nonpayable"
  >;

  getMyAccessHistory: TypedContractMethod<
    [count: BigNumberish],
    [MedAccessControl.AccessEventStructOutput[]],
    "view"
  >;

  getMyActivePermissions: TypedContractMethod<
    [],
    [MedAccessControl.AccessPermissionStructOutput[]],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [
      provider: AddressLike,
      providerName: string,
      providerRole: string,
      accessType: BigNumberish,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  revokeAccess: TypedContractMethod<
    [provider: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeAllAccess: TypedContractMethod<[reason: string], [void], "nonpayable">;

  updateAccessExpiration: TypedContractMethod<
    [provider: AddressLike, durationDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAccess"
  ): TypedContractMethod<
    [patient: AddressLike, provider: AddressLike, accessType: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyAccess"
  ): TypedContractMethod<
    [patient: AddressLike, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMyAccessHistory"
  ): TypedContractMethod<
    [count: BigNumberish],
    [MedAccessControl.AccessEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyActivePermissions"
  ): TypedContractMethod<
    [],
    [MedAccessControl.AccessPermissionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [
      provider: AddressLike,
      providerName: string,
      providerRole: string,
      accessType: BigNumberish,
      durationDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [provider: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAllAccess"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAccessExpiration"
  ): TypedContractMethod<
    [provider: AddressLike, durationDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "AccessUsed"
  ): TypedContractEvent<
    AccessUsedEvent.InputTuple,
    AccessUsedEvent.OutputTuple,
    AccessUsedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAccessUsed"
  ): TypedContractEvent<
    EmergencyAccessUsedEvent.InputTuple,
    EmergencyAccessUsedEvent.OutputTuple,
    EmergencyAccessUsedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address,address,uint8,uint256)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address,address,string)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "AccessUsed(address,address,string)": TypedContractEvent<
      AccessUsedEvent.InputTuple,
      AccessUsedEvent.OutputTuple,
      AccessUsedEvent.OutputObject
    >;
    AccessUsed: TypedContractEvent<
      AccessUsedEvent.InputTuple,
      AccessUsedEvent.OutputTuple,
      AccessUsedEvent.OutputObject
    >;

    "EmergencyAccessUsed(address,address,string)": TypedContractEvent<
      EmergencyAccessUsedEvent.InputTuple,
      EmergencyAccessUsedEvent.OutputTuple,
      EmergencyAccessUsedEvent.OutputObject
    >;
    EmergencyAccessUsed: TypedContractEvent<
      EmergencyAccessUsedEvent.InputTuple,
      EmergencyAccessUsedEvent.OutputTuple,
      EmergencyAccessUsedEvent.OutputObject
    >;
  };
}
