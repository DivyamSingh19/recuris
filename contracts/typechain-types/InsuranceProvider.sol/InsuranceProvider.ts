/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace InsuranceProvider {
  export type InsuranceClaimStruct = {
    claimId: BigNumberish;
    claimAmount: BigNumberish;
    claimType: string;
    submissionDate: BigNumberish;
    isApproved: boolean;
    claimant: AddressLike;
  };

  export type InsuranceClaimStructOutput = [
    claimId: bigint,
    claimAmount: bigint,
    claimType: string,
    submissionDate: bigint,
    isApproved: boolean,
    claimant: string
  ] & {
    claimId: bigint;
    claimAmount: bigint;
    claimType: string;
    submissionDate: bigint;
    isApproved: boolean;
    claimant: string;
  };

  export type HealthRecordStruct = {
    recordHash: string;
    recordType: string;
    timestamp: BigNumberish;
    isActive: boolean;
  };

  export type HealthRecordStructOutput = [
    recordHash: string,
    recordType: string,
    timestamp: bigint,
    isActive: boolean
  ] & {
    recordHash: string;
    recordType: string;
    timestamp: bigint;
    isActive: boolean;
  };
}

export interface InsuranceProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeAgent"
      | "deauthorizeAgent"
      | "owner"
      | "renounceOwnership"
      | "submitClaim"
      | "uploadHealthRecord"
      | "viewMyClaims"
      | "viewMyRecords"
      | "viewPatientClaims"
      | "viewPatientRecords"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentAuthorized"
      | "AgentDeauthorized"
      | "ClaimSubmitted"
      | "RecordAccessed"
      | "RecordUploaded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadHealthRecord",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewMyClaims",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewMyRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewPatientRecords",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uploadHealthRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMyClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMyRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewPatientRecords",
    data: BytesLike
  ): Result;
}

export namespace AgentAuthorizedEvent {
  export type InputTuple = [patient: AddressLike, agent: AddressLike];
  export type OutputTuple = [patient: string, agent: string];
  export interface OutputObject {
    patient: string;
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDeauthorizedEvent {
  export type InputTuple = [patient: AddressLike, agent: AddressLike];
  export type OutputTuple = [patient: string, agent: string];
  export interface OutputObject {
    patient: string;
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    patient: AddressLike,
    claimId: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    patient: string,
    claimId: bigint,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    patient: string;
    claimId: bigint;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordAccessedEvent {
  export type InputTuple = [
    patient: AddressLike,
    agent: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [patient: string, agent: string, timestamp: bigint];
  export interface OutputObject {
    patient: string;
    agent: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordUploadedEvent {
  export type InputTuple = [
    patient: AddressLike,
    recordType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    patient: string,
    recordType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    patient: string;
    recordType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsuranceProvider extends BaseContract {
  connect(runner?: ContractRunner | null): InsuranceProvider;
  waitForDeployment(): Promise<this>;

  interface: InsuranceProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeAgent: TypedContractMethod<
    [agent: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeAgent: TypedContractMethod<
    [agent: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitClaim: TypedContractMethod<
    [claimType: string, claimAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  uploadHealthRecord: TypedContractMethod<
    [recordHash: string, recordType: string],
    [void],
    "nonpayable"
  >;

  viewMyClaims: TypedContractMethod<
    [],
    [InsuranceProvider.InsuranceClaimStructOutput[]],
    "view"
  >;

  viewMyRecords: TypedContractMethod<
    [],
    [InsuranceProvider.HealthRecordStructOutput[]],
    "view"
  >;

  viewPatientClaims: TypedContractMethod<
    [patient: AddressLike],
    [InsuranceProvider.InsuranceClaimStructOutput[]],
    "view"
  >;

  viewPatientRecords: TypedContractMethod<
    [patient: AddressLike],
    [InsuranceProvider.HealthRecordStructOutput[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeAgent"
  ): TypedContractMethod<[agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeAgent"
  ): TypedContractMethod<[agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [claimType: string, claimAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadHealthRecord"
  ): TypedContractMethod<
    [recordHash: string, recordType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewMyClaims"
  ): TypedContractMethod<
    [],
    [InsuranceProvider.InsuranceClaimStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewMyRecords"
  ): TypedContractMethod<
    [],
    [InsuranceProvider.HealthRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewPatientClaims"
  ): TypedContractMethod<
    [patient: AddressLike],
    [InsuranceProvider.InsuranceClaimStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewPatientRecords"
  ): TypedContractMethod<
    [patient: AddressLike],
    [InsuranceProvider.HealthRecordStructOutput[]],
    "nonpayable"
  >;

  getEvent(
    key: "AgentAuthorized"
  ): TypedContractEvent<
    AgentAuthorizedEvent.InputTuple,
    AgentAuthorizedEvent.OutputTuple,
    AgentAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "AgentDeauthorized"
  ): TypedContractEvent<
    AgentDeauthorizedEvent.InputTuple,
    AgentDeauthorizedEvent.OutputTuple,
    AgentDeauthorizedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "RecordAccessed"
  ): TypedContractEvent<
    RecordAccessedEvent.InputTuple,
    RecordAccessedEvent.OutputTuple,
    RecordAccessedEvent.OutputObject
  >;
  getEvent(
    key: "RecordUploaded"
  ): TypedContractEvent<
    RecordUploadedEvent.InputTuple,
    RecordUploadedEvent.OutputTuple,
    RecordUploadedEvent.OutputObject
  >;

  filters: {
    "AgentAuthorized(address,address)": TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;
    AgentAuthorized: TypedContractEvent<
      AgentAuthorizedEvent.InputTuple,
      AgentAuthorizedEvent.OutputTuple,
      AgentAuthorizedEvent.OutputObject
    >;

    "AgentDeauthorized(address,address)": TypedContractEvent<
      AgentDeauthorizedEvent.InputTuple,
      AgentDeauthorizedEvent.OutputTuple,
      AgentDeauthorizedEvent.OutputObject
    >;
    AgentDeauthorized: TypedContractEvent<
      AgentDeauthorizedEvent.InputTuple,
      AgentDeauthorizedEvent.OutputTuple,
      AgentDeauthorizedEvent.OutputObject
    >;

    "ClaimSubmitted(address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "RecordAccessed(address,address,uint256)": TypedContractEvent<
      RecordAccessedEvent.InputTuple,
      RecordAccessedEvent.OutputTuple,
      RecordAccessedEvent.OutputObject
    >;
    RecordAccessed: TypedContractEvent<
      RecordAccessedEvent.InputTuple,
      RecordAccessedEvent.OutputTuple,
      RecordAccessedEvent.OutputObject
    >;

    "RecordUploaded(address,string,uint256)": TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;
    RecordUploaded: TypedContractEvent<
      RecordUploadedEvent.InputTuple,
      RecordUploadedEvent.OutputTuple,
      RecordUploadedEvent.OutputObject
    >;
  };
}
